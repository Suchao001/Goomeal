// screens/NotificationSettingsScreen.tsx
import React, { useState } from 'react';
import { View, Text, ScrollView, TouchableOpacity, Switch, Alert } from 'react-native';
import Icon from 'react-native-vector-icons/Ionicons';
import { useTypedNavigation } from '../../hooks/Navigation';
import { scheduleMealReminders, cancelAllScheduled, listScheduled, ensurePermissionsAndChannel } from '../../utils/notification';

const NotificationSettingsScreen = () => {
  const navigation = useTypedNavigation<'NotificationSettings'>();

  const [mealTimes, setMealTimes] = useState<string[]>(['07:30:00', '12:00:00', '18:30:00']);

  const [notifications, setNotifications] = useState({
    mealReminders: false,
    sound: true,
    vibration: true,
    popup: true, 
  });

  const handleToggle = async (key: keyof typeof notifications) => {
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô sound/vibration ‡πÉ‡∏´‡πâ update channel ‡∏î‡πâ‡∏ß‡∏¢
    if (key === 'sound' || key === 'vibration') {
      const next = !notifications[key];
      setNotifications(prev => ({ ...prev, [key]: next }));
      try {
        await ensurePermissionsAndChannel({
          sound: key === 'sound' ? next : notifications.sound,
          vibration: key === 'vibration' ? next : notifications.vibration,
        });
      } catch (e) {
        Alert.alert('‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ channel ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
      return;
    }

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô mealReminders ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
    if (key === 'mealReminders') {
      const next = !notifications.mealReminders;
      setNotifications(prev => ({ ...prev, mealReminders: next }));
      try {
        if (next) {
          await scheduleMealReminders(mealTimes, {
            title: '‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß‡πÅ‡∏•‡πâ‡∏ß üçö',
            body: '‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',
          });
          Alert.alert('‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß');
        } else {
          await cancelAllScheduled();
          Alert.alert('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß', '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
        }
      } catch (e) {
        Alert.alert('‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
      return;
    }

    // popup: ‡πÅ‡∏Ñ‡πà state ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡∏Ñ‡∏∏‡∏° iOS popup ‡∏•‡∏∂‡∏Å‡πÜ ‡πÉ‡∏ä‡πâ handler ‡∏ó‡∏µ‡πà root)
    setNotifications(prev => ({ ...prev, [key]: !prev[key] }));
  };

  const handleTestNoti = async () => {
    // ‚Äú‡∏•‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà set ‡πÑ‡∏ß‡πâ‚Äù: ‡∏™‡∏±‡πà‡∏á schedule ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏£‡∏á‡πÜ
    try {
      await scheduleMealReminders(mealTimes, {
        title: 'üîî ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á',
        body: '‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏°‡∏∑‡πâ‡∏≠',
      });
      const all = await listScheduled();
      Alert.alert('‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß', `‡∏Å‡∏≥‡∏´‡∏ô‡∏î ${all.length} ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ`);
    } catch (e) {
      Alert.alert('‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
  };

  const notificationOptions = [
    { key: 'mealReminders' as const, label: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£', description: '‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£' },
    { key: 'sound' as const, label: '‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', description: '‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô' },
    { key: 'vibration' as const, label: '‡∏™‡∏±‡πà‡∏ô', description: '‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô' },
    { key: 'popup' as const, label: '‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û', description: '‡πÅ‡∏™‡∏î‡∏á‡∏õ‡πä‡∏≠‡∏õ‡∏≠‡∏±‡∏û‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (iOS handler)' },
  ];

  return (
    <View className="flex-1 bg-gray-100">
      {/* header */}
      <View className="flex-row items-center justify-between px-4 pt-12 pb-4 bg-white">
        <TouchableOpacity 
          className="w-10 h-10 rounded-full items-center justify-center"
          onPress={() => navigation.goBack()}
        >
          <Icon name="arrow-back" size={24} color="#9ca3af" />
        </TouchableOpacity>
        <View className="flex-row items-center gap-2">
          <Icon name="notifications" size={32} color="#9ca3af" />
          <Text className="text-lg font-semibold text-gray-800">‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</Text>
        </View>
        <Text className="text-base font-semibold text-gray-800"></Text>
      </View>

      <ScrollView className="flex-1" contentContainerStyle={{ paddingBottom: 120 }}>
        <View className="bg-white mx-4 my-4 rounded-xl p-5 shadow-lg shadow-slate-800">
          <Text className="text-xl font-promptSemiBold text-gray-800 mb-6">‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô</Text>
          
          {notificationOptions.map((option) => (
            <View key={option.key} className="flex-row items-center justify-between py-4 border-b border-gray-100 last:border-b-0">
              <View className="flex-1">
                <Text className="text-lg font-promptMedium text-gray-800">{option.label}</Text>
                <Text className="text-sm font-promptLight text-gray-600">{option.description}</Text>
              </View>
              <Switch
                value={notifications[option.key]}
                onValueChange={() => handleToggle(option.key)}
                trackColor={{ false: '#e5e7eb', true: '#ffb800' }}
                thumbColor="#ffffff"
                ios_backgroundColor="#e5e7eb"
              />
            </View>
          ))}

          {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤) */}
          <TouchableOpacity
            className="mt-6 rounded-xl p-4 items-center"
            style={{ backgroundColor: '#ffb800' }}
            onPress={handleTestNoti}
            activeOpacity={0.85}
          >
            <View className="flex-row items-center gap-2">
              <Icon name="notifications-outline" size={20} color="#ffffff" />
              <Text className="text-white font-promptBold text-base">‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ</Text>
            </View>
          </TouchableOpacity>

          {/* debug: ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß */}
          <TouchableOpacity
            className="mt-3 rounded-xl p-3 items-center border border-gray-200"
            onPress={async () => {
              const all = await listScheduled();
              Alert.alert('‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', JSON.stringify(all, null, 2));
            }}
          >
            <Text className="text-gray-800">‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ</Text>
          </TouchableOpacity>

          {/* ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */}
          <TouchableOpacity
            className="mt-3 rounded-xl p-3 items-center border border-gray-200"
            onPress={async () => {
              await cancelAllScheduled();
              Alert.alert('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß', '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
            }}
          >
            <Text className="text-gray-800">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    </View>
  );
};

export default NotificationSettingsScreen;
