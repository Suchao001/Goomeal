import { View, Text, TouchableOpacity, TextInput, ScrollView, Alert } from 'react-native';
import { useTypedNavigation } from '../../hooks/Navigation';
import { ArrowLeft } from '../../components/GeneralMaterial';
import { useState, useEffect } from 'react';
import { useRoute, RouteProp } from '@react-navigation/native';
import Icon from 'react-native-vector-icons/Ionicons';

// Type definitions for navigation
type PromptForm3RouteParams = {
  data?: {
    selectedDuration: string;
    customDays?: string;
    selectedCategories: string[];
    selectedBudget: string;
    varietyLevel: string;
    selectedIngredients: string[];
  };
};

type PromptForm3RouteProp = RouteProp<{ PromptForm3: PromptForm3RouteParams }, 'PromptForm3'>;

const PromptForm3 = () => {
  const navigation = useTypedNavigation();
  const route = useRoute<PromptForm3RouteProp>();
  
  // Additional requirements state
  const [additionalRequirements, setAdditionalRequirements] = useState('');
  const [selectedRestrictions, setSelectedRestrictions] = useState<string[]>([]);
  const [selectedGoals, setSelectedGoals] = useState<string[]>([]);
  
  // Character count
  const maxCharacters = 500;
  
  useEffect(() => {
    console.log('Screen: PromptForm3');
    // Get data from previous screens
    const prevData = route.params?.data;
    console.log('All previous form data:', prevData);
  }, []);

  // Dietary restrictions
  const dietaryRestrictions = [
    { key: 'halal', label: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Æ‡∏≤‡∏•‡∏≤‡∏•', icon: '‚ò™Ô∏è' },
    { key: 'vegetarian', label: '‡πÄ‡∏à', icon: 'ü•¨' },
    { key: 'no-pork', label: '‡πÑ‡∏°‡πà‡∏ó‡∏≤‡∏ô‡∏´‡∏°‡∏π', icon: 'üö´üê∑' },
    { key: 'no-beef', label: '‡πÑ‡∏°‡πà‡∏ó‡∏≤‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠', icon: 'üö´üêÑ' },
    { key: 'no-seafood', label: '‡πÑ‡∏°‡πà‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏•', icon: 'üö´ü¶ê' },
    { key: 'no-spicy', label: '‡πÑ‡∏°‡πà‡∏ó‡∏≤‡∏ô‡πÄ‡∏ú‡πá‡∏î', icon: 'üö´üå∂Ô∏è' },
    { key: 'low-sodium', label: '‡∏•‡∏î‡πÄ‡∏Å‡∏•‡∏∑‡∏≠', icon: 'üßÇ' },
    { key: 'no-sugar', label: '‡πÑ‡∏°‡πà‡∏ó‡∏≤‡∏ô‡∏´‡∏ß‡∏≤‡∏ô', icon: 'üö´üç≠' }
  ];

  // Health goals
  const healthGoals = [
    { key: 'weight-loss', label: '‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å', icon: '‚öñÔ∏è' },
    { key: 'muscle-gain', label: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠', icon: 'üí™' },
    { key: 'maintain', label: '‡∏Ñ‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å', icon: 'üéØ' },
    { key: 'energy', label: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô', icon: '‚ö°' },
    { key: 'health', label: '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ', icon: '‚ù§Ô∏è' },
    { key: 'digestion', label: '‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡πà‡∏≠‡∏¢‡∏î‡∏µ', icon: 'üå±' }
  ];

  const handleRestrictionToggle = (restrictionKey: string) => {
    setSelectedRestrictions(prev => 
      prev.includes(restrictionKey) 
        ? prev.filter(key => key !== restrictionKey)
        : [...prev, restrictionKey]
    );
  };

  const handleGoalToggle = (goalKey: string) => {
    setSelectedGoals(prev => 
      prev.includes(goalKey) 
        ? prev.filter(key => key !== goalKey)
        : [...prev, goalKey]
    );
  };

  const handleBack = () => {
    navigation.goBack();
  };

  const handleSubmit = () => {
    // Validate form
    if (additionalRequirements.trim().length < 10 && selectedRestrictions.length === 0 && selectedGoals.length === 0) {
      Alert.alert(
        '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
        '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£'
      );
      return;
    }

    // Collect all form data
    const finalFormData = {
      ...route.params?.data,
      additionalRequirements: additionalRequirements.trim(),
      selectedRestrictions,
      selectedGoals
    };
    
    console.log('Final Form Data:', finalFormData);
    
    // Show success message
    Alert.alert(
      '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
      '‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì',
      [
        {
          text: '‡∏ï‡∏Å‡∏•‡∏á',
          onPress: () => {
            // TODO: Navigate to result screen or processing screen
            navigation.navigate('Home');
          }
        }
      ]
    );
  };

  return (
    <ScrollView className="flex-1 bg-white">
      {/* Back Arrow */}
      <ArrowLeft />

      {/* Header Text */}
      <View className="px-6 mt-20 mb-8">
        <Text className="text-3xl text-gray-800 mb-2 font-promptSemiBold text-center">
          ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
          ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        </Text>
        <Text className="text-gray-600 mb-2 font-promptMedium text-lg text-center">
          ‡∏ö‡∏≠‡∏Å‡πÄ‡∏£‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        </Text>
        <Text className="text-primary font-promptMedium text-base text-center">
          ‡∏´‡∏ô‡πâ‡∏≤ 3/3
        </Text>
      </View>

      <View className="px-6">
        {/* Dietary Restrictions */}
        <View className="mb-8">
          <Text className="text-gray-800 mb-4 font-promptSemiBold text-lg">
            üö´ ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô
          </Text>
          <View className="flex-row flex-wrap gap-2">
            {dietaryRestrictions.map((restriction) => (
              <TouchableOpacity
                key={restriction.key}
                className={`rounded-full px-3 py-2 mr-1 mb-2 flex-row items-center ${
                  selectedRestrictions.includes(restriction.key)
                    ? 'bg-red-100 border-2 border-red-400'
                    : 'bg-gray-100 border border-gray-200'
                }`}
                onPress={() => handleRestrictionToggle(restriction.key)}
              >
                <Text className="mr-1 text-sm">{restriction.icon}</Text>
                <Text className={`font-promptMedium text-sm ${
                  selectedRestrictions.includes(restriction.key) ? 'text-red-700' : 'text-gray-700'
                }`}>
                  {restriction.label}
                </Text>
              </TouchableOpacity>
            ))}
          </View>
          {selectedRestrictions.length > 0 && (
            <Text className="text-red-600 font-promptLight text-sm mt-2">
              ‚úì ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î {selectedRestrictions.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            </Text>
          )}
        </View>

        {/* Health Goals */}
        <View className="mb-8">
          <Text className="text-gray-800 mb-4 font-promptSemiBold text-lg">
            üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
          </Text>
          <View className="flex-row flex-wrap gap-2">
            {healthGoals.map((goal) => (
              <TouchableOpacity
                key={goal.key}
                className={`rounded-full px-3 py-2 mr-1 mb-2 flex-row items-center ${
                  selectedGoals.includes(goal.key)
                    ? 'bg-[#77dd77] border-2 border-[#77dd77]'
                    : 'bg-gray-100 border border-gray-200'
                }`}
                onPress={() => handleGoalToggle(goal.key)}
              >
                <Text className="mr-1 text-sm">{goal.icon}</Text>
                <Text className={`font-promptMedium text-sm ${
                  selectedGoals.includes(goal.key) ? 'text-white' : 'text-gray-700'
                }`}>
                  {goal.label}
                </Text>
              </TouchableOpacity>
            ))}
          </View>
          {selectedGoals.length > 0 && (
            <Text className="text-[#77dd77] font-promptLight text-sm mt-2">
              ‚úì ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ {selectedGoals.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            </Text>
          )}
        </View>

        {/* Additional Requirements Text Input */}
        <View className="mb-8">
          <Text className="text-gray-800 mb-4 font-promptSemiBold text-lg">
            üí¨ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
          </Text>
          <Text className="text-gray-600 font-promptLight text-sm mb-3">
            ‡∏ö‡∏≠‡∏Å‡πÄ‡∏£‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô, ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏ô‡∏ä‡∏≠‡∏ö, ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ
          </Text>
          <View className="relative">
            <TextInput
              className="border border-gray-300 rounded-lg p-4 font-promptRegular text-base min-h-[120px]"
              placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡∏≠‡∏ö‡∏Å‡∏¥‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ä‡πâ‡∏≤‡∏á‡πà‡∏≤‡∏¢‡πÜ, ‡πÑ‡∏°‡πà‡∏ä‡∏≠‡∏ö‡∏Å‡∏¥‡∏ô‡∏ú‡∏±‡∏Å, ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡πà‡∏≤‡∏¢, ‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏û‡∏µ‡∏¢‡∏á 30 ‡∏ô‡∏≤‡∏ó‡∏µ..."
              value={additionalRequirements}
              onChangeText={setAdditionalRequirements}
              maxLength={maxCharacters}
              multiline
              textAlignVertical="top"
            />
            <View className="absolute bottom-2 right-3 bg-white px-2">
              <Text className={`text-xs font-promptLight ${
                additionalRequirements.length > maxCharacters * 0.9 ? 'text-red-500' : 'text-gray-500'
              }`}>
                {additionalRequirements.length}/{maxCharacters}
              </Text>
            </View>
          </View>
        </View>

        {/* Summary Preview */}
        <View className="mb-8 bg-primary/5 rounded-xl p-4">
          <Text className="text-primary font-promptSemiBold text-base mb-3 flex-row items-center">
            üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å
          </Text>
          <View className="space-y-2">
            {selectedRestrictions.length > 0 && (
              <Text className="text-gray-700 font-promptMedium text-sm">
                ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î: {selectedRestrictions.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
              </Text>
            )}
            {selectedGoals.length > 0 && (
              <Text className="text-gray-700 font-promptMedium text-sm">
                ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: {selectedGoals.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
              </Text>
            )}
            {additionalRequirements.trim() && (
              <Text className="text-gray-700 font-promptMedium text-sm">
                ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: {additionalRequirements.trim().length} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
              </Text>
            )}
          </View>
        </View>
      </View>

      {/* Navigation Buttons */}
      <View className="px-6 pb-8">
        <View className="flex-row gap-3">
          <TouchableOpacity
            className="flex-1 border-2 border-primary rounded-xl p-4 justify-center items-center"
            onPress={handleBack}
          >
            <Text className="text-primary text-lg font-promptBold">‡∏Å‡∏•‡∏±‡∏ö</Text>
          </TouchableOpacity>
          
          <TouchableOpacity
            className="flex-1 bg-primary rounded-xl p-4 justify-center items-center flex-row"
            onPress={handleSubmit}
          >
            <Icon name="checkmark-circle" size={24} color="white" className="mr-2" />
            <Text className="text-white text-lg font-promptBold ml-2">‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô</Text>
          </TouchableOpacity>
        </View>
        
        {/* Progress indicator */}
        <View className="flex-row justify-center mt-4 space-x-2">
          <View className="w-8 h-2 bg-gray-300 rounded-full" />
          <View className="w-8 h-2 bg-gray-300 rounded-full" />
          <View className="w-8 h-2 bg-primary rounded-full" />
        </View>
      </View>
    </ScrollView>
  );
};

export default PromptForm3;
