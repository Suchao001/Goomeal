import React, { createContext, useContext, useState, ReactNode,useCallback } from 'react';
import * as SecureStore from 'expo-secure-store';
import { base_url } from '../config';
import { ApiClient } from '../utils/apiClient';

// Define the data structure for personal setup
export interface PersonalSetupData {
  // PersonalSetupScreen data
  height?: string;
  weight?: string;
  age?: string;
  gender?: 'male' | 'female' | 'other';
  body_fat?: 'low' | 'normal' | 'high' | 'don\'t know';
  
  // PersonalPlanScreen1 data
  target_goal?: 'decrease' | 'increase' | 'healthy';
  target_weight?: string;
  plan_duration?: string;

  isForAi?: boolean; // Optional, used for AI-specific plans
  // PersonalPlanScreen2 data
  activity_level?: 'low' | 'moderate' | 'high' | 'very high';
  
  // PersonalPlanScreen3 data
  eating_type?: 'omnivore' | 'keto' | 'vegetarian' | 'vegan' | 'other';
  
  // PersonalPlanScreen4 data
  dietary_restrictions?: string[];
  additional_requirements?: string;
}

interface PersonalSetupContextType {
  setupData: PersonalSetupData;
  updateSetupData: (data: Partial<PersonalSetupData>) => void;
  getSummary: () => {
    personal: { label: string; value: string }[];
    plan: { label: string; value: string }[];
    activity: { label: string; value: string }[];
    eating: { label: string; value: string }[];
    restrictions: { label: string; value: string }[];
    isForAi?: boolean;
  };
  submitToDatabase: () => Promise<{ success: boolean; message: string }>;
  getPlanSuggestions: () => Promise<{ success: boolean; message: string; data?: any }>;
  resetSetupData: () => void;
}

 // API Client
  const apiClient = new ApiClient();


const PersonalSetupContext = createContext<PersonalSetupContextType | undefined>(undefined);

export const PersonalSetupProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [setupData, setSetupData] = useState<PersonalSetupData>({});

  const updateSetupData = useCallback((data: Partial<PersonalSetupData>) => {
  setSetupData(prev => {
    const newData = { ...prev, ...data };
    console.log('üìä ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', newData);
    return newData;
  });
}, []);
  const getSummary = () => {
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    const genderMap = {
      'male': '‡∏ä‡∏≤‡∏¢',
      'female': '‡∏´‡∏ç‡∏¥‡∏á',
      'other': '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'
    };

    const bodyFatMap = {
      'low': '‡∏ï‡πà‡∏≥',
      'normal': '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
      'high': '‡∏™‡∏π‡∏á',
      'don\'t know': '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'
    };

    const targetGoalMap = {
      'decrease': '‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å',
      'increase': '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å',
      'healthy': '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ'
    };

    const activityLevelMap = {
      'low': '‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢',
      'moderate': '‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
      'high': '‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å',
      'very high': '‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏Å'
    };

    const eatingTypeMap = {
      'omnivore': '‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ',
      'keto': '‡∏Ñ‡∏µ‡πÇ‡∏ï',
      'vegetarian': '‡∏°‡∏±‡∏á‡∏™‡∏ß‡∏¥‡∏£‡∏±‡∏ï‡∏¥',
      'vegan': '‡∏ß‡∏µ‡πÅ‡∏Å‡∏ô',
      'other': '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'
    };

    return {
      personal: [
        { label: '‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á', value: setupData.height ? `${setupData.height} ‡∏ã‡∏°.` : '-' },
        { label: '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å', value: setupData.weight ? `${setupData.weight} ‡∏Å‡∏Å.` : '-' },
        { label: '‡∏≠‡∏≤‡∏¢‡∏∏', value: setupData.age ? `${setupData.age} ‡∏õ‡∏µ` : '-' },
        { label: '‡πÄ‡∏û‡∏®', value: setupData.gender ? genderMap[setupData.gender] : '-' },
        { label: '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÑ‡∏Ç‡∏°‡∏±‡∏ô', value: setupData.body_fat ? bodyFatMap[setupData.body_fat] : '-' }
      ],
      plan: [
        { label: '‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢', value: setupData.target_goal ? targetGoalMap[setupData.target_goal] : '-' },
        { 
          label: setupData.target_goal === 'increase' 
            ? '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°' 
            : setupData.target_goal === 'decrease' 
            ? '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡∏•‡∏î' 
            : '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢', 
          value: setupData.target_weight ? `${setupData.target_weight} ‡∏Å‡∏Å.` : '-' 
        },
        { label: '‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏û‡∏•‡∏ô', value: setupData.plan_duration ? `${setupData.plan_duration} ‡∏ß‡∏±‡∏ô` : '-' }
      ],
      activity: [
        { label: '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°', value: setupData.activity_level ? activityLevelMap[setupData.activity_level] : '-' }
      ],
      eating: [
        { label: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô', value: setupData.eating_type ? eatingTypeMap[setupData.eating_type] : '-' }
      ],
      restrictions: [
        { label: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏û‡πâ', value: setupData.dietary_restrictions && setupData.dietary_restrictions.length > 0 ? setupData.dietary_restrictions.join(', ') : '‡πÑ‡∏°‡πà‡∏°‡∏µ' },
        { label: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°', value: setupData.additional_requirements || '‡πÑ‡∏°‡πà‡∏°‡∏µ' }
      ],
      isForAi: setupData.isForAi
    };
  };

  const getPlanSuggestions = async (): Promise<{ success: boolean; message: string; data?: any }> => {
    try {
      const token = await SecureStore.getItemAsync('accessToken');
      if (!token) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö access token ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà');
      } 

      const payload = {
        age: setupData.age ? parseInt(setupData.age) : undefined,
        weight: setupData.weight ? parseFloat(setupData.weight) : undefined,
        height: setupData.height ? parseFloat(setupData.height) : undefined,
        gender: setupData.gender,
        body_fat: setupData.body_fat,
        target_goal: setupData.target_goal,
        target_weight: setupData.target_weight ? parseFloat(setupData.target_weight) : undefined,
        activity_level: setupData.activity_level,
        eating_type: setupData.eating_type,
        dietary_restrictions: setupData.dietary_restrictions ? setupData.dietary_restrictions.join(', ') : undefined,
        additional_requirements: setupData.additional_requirements || undefined,
        totalPlanDay : setupData.plan_duration ? parseInt(setupData.plan_duration) : undefined,
      }

      const response = await apiClient.getFoodPlanSuggestions(payload);

      if (!response.success) {
        throw new Error(response.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      }
      console.log('üìä ‡πÅ‡∏û‡∏•‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ:', response);

      return {
        success: response.success,
        message: response.message ?? '',
        data: response.data, // Include the actual meal plan data
      };
    } catch (error: any) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
      throw error;
    }
  };

  const submitToDatabase = async (): Promise<{ success: boolean; message: string }> => {
    try {
      console.log('üì§ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend...');
      
      const token = await SecureStore.getItemAsync('accessToken');
      if (!token) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö access token ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà');
      }

      const requestData = {
        age: setupData.age ? parseInt(setupData.age) : undefined,
        weight: setupData.weight ? parseFloat(setupData.weight) : undefined,
        height: setupData.height ? parseFloat(setupData.height) : undefined,
        gender: setupData.gender,
        body_fat: setupData.body_fat,
        target_goal: setupData.target_goal,
        target_weight: setupData.target_weight ? parseFloat(setupData.target_weight) : undefined,
        activity_level: setupData.activity_level,
        eating_type: setupData.eating_type,
        dietary_restrictions: setupData.dietary_restrictions ? setupData.dietary_restrictions.join(', ') : undefined,
        additional_requirements: setupData.additional_requirements || undefined,
        first_time_setting: true 
      };

      const response = await fetch(`${base_url}/user/update-personal-data`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(requestData)
      });
      
      const result = await response.json();
      
      if (!response.ok) {
        throw new Error(result.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      }
      
      console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', result);
      return { 
        success: true, 
        message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' 
      };
      
    } catch (error: any) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
      return { 
        success: false, 
        message: error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' 
      };
    }
  };

  const resetSetupData = () => {
    setSetupData({});
  };

  return (
    <PersonalSetupContext.Provider 
      value={{ 
        setupData, 
        updateSetupData, 
        getSummary,
        resetSetupData,
        submitToDatabase, 
        getPlanSuggestions
      }}
    >
      {children}
    </PersonalSetupContext.Provider>
  );
};

export const usePersonalSetup = () => {
  const context = useContext(PersonalSetupContext);
  if (context === undefined) {
    throw new Error('usePersonalSetup must be used within a PersonalSetupProvider');
  }
  return context;
};
