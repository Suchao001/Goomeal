import { Request, Response } from 'express';
import db from '../db_config';
import axios from 'axios';

const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';
const AI_API_KEY = process.env.AI_API_KEY;

interface ChatMessage {
  id?: number;
  user_id: number;
  role: 'user' | 'assistant' | 'system';
  message: string;
  created_at?: Date;
}

interface ChatSession {
  user_id: number;
  started_at?: Date;
  updated_at?: Date;
  summary?: string;
}

const getUserInfo = async (userId: number) => {
  try {
    const user = await db('users').where({ id: userId }).first();
    if (!user) {
      throw new Error('User not found');
    }
    return {
      age: user.age,
      weight: user.weight,
      height: user.height,
      gender: user.gender,
      body_fat: user.body_fat,
      target_weight: user.target_weight,
      eating_type: user.eating_type,
      dietary_restrictions: user.dietary_restrictions,
      additional_requirements: user.additional_requirements || undefined,
      activity_level: user.activity_level,
    };
  } catch (error) {
    console.error('Error fetching user info:', error);
    throw error;
  }
};

export const getChatSession = async (req: Request, res: Response): Promise<void> => {
  try {
    const userId = (req as any).user?.id;
    
    if (!userId) {
      res.status(401).json({
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
      });
      return;
    }

    let session = await db('chat_session')
      .where({ user_id: userId })
      .first();

    // If no session exists, create one
    if (!session) {
      await db('chat_session').insert({
        user_id: userId,
        started_at: new Date(),
        updated_at: new Date()
      });

      // Add initial system message
      await db('chat_message').insert({
        user_id: userId,
        role: 'assistant',
        message: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?'
      });

      // Get the newly created session
      session = await db('chat_session')
        .where({ user_id: userId })
        .first();
    }

    res.status(200).json({
      success: true,
      data: session
    });

  } catch (error) {
    console.error('Error getting chat session:', error);
    res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô'
    });
  }
};


export const getChatMessages = async (req: Request, res: Response): Promise<void> => {
  try {
    const userId = (req as any).user?.id;
    const { limit = 50, offset = 0 } = req.query;
    
    if (!userId) {
      res.status(401).json({
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
      });
      return;
    }

    const messages = await db('chat_message')
      .where({ user_id: userId })
      .orderBy('created_at', 'asc')
      .limit(Number(limit))
      .offset(Number(offset));

    const formattedMessages = messages.map((msg: any, index: number) => ({
      id: msg.id,
      text: msg.message,
      isBot: msg.role === 'assistant' || msg.role === 'system',
      role: msg.role,
      timestamp: new Date(msg.created_at).toLocaleTimeString('th-TH', { 
        hour: '2-digit', 
        minute: '2-digit' 
      })
    }));

    res.status(200).json({
      success: true,
      data: formattedMessages
    });

  } catch (error) {
    console.error('Error getting chat messages:', error);
    res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°'
    });
  }
};

export const sendMessage = async (req: Request, res: Response): Promise<void> => {
  try {
    const userId = (req as any).user?.id;
    const { message } = req.body;
    
    if (!userId) {
      res.status(401).json({
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
      });
      return;
    }

    if (!message || !message.trim()) {
      res.status(400).json({
        success: false,
        error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°'
      });
      return;
    }

    let session = await db('chat_session')
      .where({ user_id: userId })
      .first();

    if (!session) {
      await db('chat_session').insert({
        user_id: userId,
        started_at: new Date(),
        updated_at: new Date()
      });
    }

    // Save user message
    const userMessageData: ChatMessage = {
      user_id: userId,
      role: 'user',
      message: message.trim()
    };

    await db('chat_message').insert(userMessageData);


    const aiResponse = await getAiResponse(message.trim(), userId);

    // Save AI response
    const aiMessageData: ChatMessage = {
      user_id: userId,
      role: 'assistant',
      message: aiResponse
    };

    await db('chat_message').insert(aiMessageData);

    // Generate rolling summary after saving both messages
    await generateRollingSummary(userId);

    await db('chat_session')
      .where({ user_id: userId })
      .update({ updated_at: new Date() });

    const userMsg = {
      id: Date.now(),
      text: message.trim(),
      isBot: false,
      role: 'user',
      timestamp: new Date().toLocaleTimeString('th-TH', { 
        hour: '2-digit', 
        minute: '2-digit' 
      })
    };

    const botMsg = {
      id: Date.now() + 1,
      text: aiResponse,
      isBot: true,
      role: 'assistant',
      timestamp: new Date().toLocaleTimeString('th-TH', { 
        hour: '2-digit', 
        minute: '2-digit' 
      })
    };

    console.log(`üí¨ [GoodChat] User ${userId}: "${message.trim()}" -> AI: "${aiResponse.substring(0, 50)}..."`);

    res.status(200).json({
      success: true,
      data: {
        userMessage: userMsg,
        botMessage: botMsg
      }
    });

  } catch (error) {
    console.error('Error sending message:', error);
    res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°'
    });
  }
};

/**
 * Clear chat history
 */
export const clearChatHistory = async (req: Request, res: Response): Promise<void> => {
  try {
    const userId = (req as any).user?.id;
    
    if (!userId) {
      res.status(401).json({
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
      });
      return;
    }

    // Delete all messages for user
    await db('chat_message')
      .where({ user_id: userId })
      .del();

    // Reset session or delete it
    await db('chat_session')
      .where({ user_id: userId })
      .del();

    res.status(200).json({
      success: true,
      message: '‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'
    });

  } catch (error) {
    console.error('Error clearing chat history:', error);
    res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤'
    });
  }
};


/**
 * Get AI response from OpenAI API
 */
async function getAiResponse(userMessage: string, userId: number): Promise<string> {
  try {

    if (!AI_API_KEY) {
      throw new Error('OpenAI API key not configured');
    }

    const recentMessages = await db('chat_message')
      .where({ user_id: userId })
      .orderBy('created_at', 'desc')
      .limit(10)
      .select('role', 'message');

    const getSummary = await db('chat_session')
      .where({ user_id: userId })
      .first();
    
    const {summary} = getSummary || {};

    const { age, weight, height, gender, body_fat, target_weight,
       eating_type, dietary_restrictions, additional_requirements, 
       activity_level } = await getUserInfo(userId);

    const conversationHistory = recentMessages.reverse().map(msg => ({
      role: msg.role === 'user' ? 'user' : 'assistant',
      content: msg.message
    }));

    
    const systemMessage = {
      role: 'system',
      content: `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡∏ä‡∏∑‡πà‡∏≠ "GoodMeal AI" 
      ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö:
      - ‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
      - ‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£
      - ‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£
      - ‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
      - ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠
      - ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
      
      ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
      - ‡∏≠‡∏≤‡∏¢‡∏∏: ${age} ‡∏õ‡∏µ
      - ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å: ${weight} ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°
      - ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á: ${height} ‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£
      - ‡πÄ‡∏û‡∏®: ${gender}
      - ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢: ${body_fat}%
      - ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ${target_weight} ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°
      - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô: ${eating_type}
      - ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£: ${dietary_restrictions}
      - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: ${additional_requirements}
      - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: ${activity_level}

      ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
      - ‡∏™‡∏£‡∏∏‡∏õ: ${summary || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ'}

      ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏™‡∏°‡∏≠ ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
      ‡πÉ‡∏ä‡πâ‡∏ô‡πâ‡∏≥‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à`
    };

    const messages = [
      systemMessage,
      ...conversationHistory,
      { role: 'user', content: userMessage }
    ];

    // Call OpenAI API
    const response = await axios.post(OPENAI_API_URL, {
      model: 'gpt-3.5-turbo',
      messages: messages,
      max_tokens: 500,
      temperature: 0.7,
      top_p: 0.9
    }, {
      headers: {
        'Authorization': `Bearer ${AI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 30000 // 30 second timeout
    });

    const aiResponse = response.data.choices?.[0]?.message?.content?.trim();
    
    if (!aiResponse) {
      return '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
    }

    return aiResponse;

  } catch (error) {
    console.error('Error calling OpenAI API:', error);
    
    // Fallback response if AI API fails
    return generateFallbackResponse();
  }
}

/**
 * Generate rolling summary for conversation context
 */
async function generateRollingSummary(userId: number): Promise<string> {
  try {
    if (!AI_API_KEY) {
      throw new Error('OpenAI API key not configured');
    }

    // ‡∏î‡∏∂‡∏á summary ‡πÄ‡∏Å‡πà‡∏≤
    const getSummary = await db('chat_session')
      .where({ user_id: userId })
      .first();
    
    const oldSummary = getSummary?.summary || "";

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà (recent messages ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏£‡∏∏‡∏õ)
    const recentMessages = await db('chat_message')
      .where({ user_id: userId })
      .orderBy('created_at', 'desc')
      .limit(6) // ‡∏î‡∏∂‡∏á 6 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (3 ‡∏Ñ‡∏π‡πà user-assistant)
      .select('role', 'message');

    // ‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ { role: 'user' | 'assistant', content: string }
    const newMessages = recentMessages.reverse().map(msg => ({
      role: msg.role,
      content: msg.message
    }));

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡πÉ‡∏´‡πâ AI ‡∏™‡∏£‡∏∏‡∏õ
    const systemMessage = {
      role: 'system',
      content: `‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ AI ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤ ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏ã‡πâ‡∏≥
      ‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤`
    };

    const userPrompt = `‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ö‡∏ó‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏î‡∏¥‡∏°:
${oldSummary}

‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà:
${newMessages.map(msg => `${msg.role}: ${msg.content}`).join('\n')}

‡πÇ‡∏õ‡∏£‡∏î‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏ó‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô ‡πÇ‡∏î‡∏¢‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå`;

    const userMessage = {
      role: 'user',
      content: userPrompt
    };

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å OpenAI API
    const response = await axios.post(OPENAI_API_URL, {
      model: 'gpt-3.5-turbo',
      messages: [systemMessage, userMessage],
      max_tokens: 250, // ‡∏õ‡∏£‡∏±‡∏ö max_tokens ‡∏û‡∏≠‡πÄ‡∏´‡∏°‡∏≤‡∏∞
      temperature: 0, // temperature: 0 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏£‡∏á‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏∏‡πà‡∏°
      top_p: 1
    }, {
      headers: {
        'Authorization': `Bearer ${AI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });

    // ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å AI
    const newSummary = response.data.choices?.[0]?.message?.content?.trim();
    
    if (!newSummary) {
      console.warn('Failed to generate summary, keeping old summary');
      return oldSummary;
    }

    // ‡πÄ‡∏Å‡πá‡∏ö summary ‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á DB
    await db('chat_session')
      .where({ user_id: userId })
      .update({ 
        summary: newSummary,
        updated_at: new Date()
      });

    console.log(`üìù [Rolling Summary] Updated for user ${userId}: "${newSummary.substring(0, 100)}..."`);
    
    return newSummary;

  } catch (error) {
    console.error('Error generating rolling summary:', error);
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ summary ‡πÄ‡∏Å‡πà‡∏≤
    const getSummary = await db('chat_session')
      .where({ user_id: userId })
      .first();
    
    return getSummary?.summary || "";
  }
}

/**
 * Generate fallback response when AI API is unavailable
 */
function generateFallbackResponse() {

  return '‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
}

/**
 * Get current conversation summary
 */
export const getConversationSummary = async (req: Request, res: Response): Promise<void> => {
  try {
    const userId = (req as any).user?.id;
    
    if (!userId) {
      res.status(401).json({
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
      });
      return;
    }

    const session = await db('chat_session')
      .where({ user_id: userId })
      .first();

    res.status(200).json({
      success: true,
      data: {
        summary: session?.summary || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏ó‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤',
        updated_at: session?.updated_at
      }
    });

  } catch (error) {
    console.error('Error getting conversation summary:', error);
    res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ö‡∏ó‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤'
    });
  }
};

/**
 * Manually trigger rolling summary generation
 */
export const triggerRollingSummary = async (req: Request, res: Response): Promise<void> => {
  try {
    const userId = (req as any).user?.id;
    
    if (!userId) {
      res.status(401).json({
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'
      });
      return;
    }

    const newSummary = await generateRollingSummary(userId);

    res.status(200).json({
      success: true,
      data: {
        summary: newSummary,
        message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'
      }
    });

  } catch (error) {
    console.error('Error triggering rolling summary:', error);
    res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤'
    });
  }
};


export const checkAiHealth = async (req: Request, res: Response): Promise<void> => {
  try {
    if (!AI_API_KEY) {
      res.status(200).json({
        success: true,
        data: {
          openai_available: false,
          api_key_configured: false,
          fallback_mode: true,
          error: 'OpenAI API key not configured'
        }
      });
      return;
    }
    const response = await axios.post(OPENAI_API_URL, {
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: 'Hello' }],
      max_tokens: 5
    }, {
      headers: {
        'Authorization': `Bearer ${AI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 10000
    });
    
    res.status(200).json({
      success: true,
      data: {
        openai_available: true,
        api_key_configured: true,
        model: 'gpt-3.5-turbo',
        status: 'healthy'
      }
    });

  } catch (error) {
    console.error('OpenAI health check failed:', error);
    res.status(200).json({
      success: true,
      data: {
        openai_available: false,
        api_key_configured: !!AI_API_KEY,
        fallback_mode: true,
        error: 'OpenAI API not reachable'
      }
    });
  }
};
