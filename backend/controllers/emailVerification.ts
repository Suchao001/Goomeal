import db from '../db_config';
import nodemailer from 'nodemailer';
import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';
import { generateEmailVerificationTemplate, generateWelcomeEmailTemplate } from '../utils/emailTemplates';

dotenv.config();

// Get email config from env
const sender = process.env.EMAIL_SENDER;
const app_password = process.env.APP_PASSWORD;

// Generate email verification token
const generateVerificationToken = (userId: number, email: string): string => {
    const jwtSecret = process.env.JWT_SECRET;
    if (!jwtSecret) {
        throw new Error('JWT_SECRET not configured');
    }
    
    // Token expires in 24 hours
    return jwt.sign({ 
        userId, 
        email,
        type: 'email_verification',
        timestamp: Date.now()
    }, jwtSecret, { expiresIn: '24h' });
};

// Send email verification
export const sendEmailVerification = async (email: string, userId: number, username: string) => {
    try {
        const verificationToken = generateVerificationToken(userId, email);
        const verificationUrl = `${process.env.BASE_URL}/verify-email?token=${verificationToken}`;
        
        // Create nodemailer transporter
        const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
                user: sender,
                pass: app_password,
            },
        });

        const mailOptions = {
            from: `"GoodMeal" <${sender}>`,
            to: email,
            subject: 'GoodMeal - ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
            html: generateEmailVerificationTemplate(username, verificationUrl)
        };

        const info = await transporter.sendMail(mailOptions);

        console.log('‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        console.log('üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á:', email);
        console.log('üÜî Message ID:', info.messageId);
        
        return {
            success: true,
            message: '‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
            email: email,
            messageId: info.messageId
        };
        
    } catch (error: any) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô:', error.message);
        throw new Error(error.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏î‡πâ');
    }
};

// Verify email token
export const verifyEmailToken = async (token: string) => {
    try {
        const jwtSecret = process.env.JWT_SECRET;
        if (!jwtSecret) {
            throw new Error('JWT_SECRET not configured');
        }

        // Verify token
        const decoded = jwt.verify(token, jwtSecret) as any;
        
        if (decoded.type !== 'email_verification') {
            throw new Error('Invalid token type');
        }

        const userId = decoded.userId;
        const email = decoded.email;
        
        // Check if user exists
        const user = await db('users').where({ id: userId, email: email }).first();
        if (!user) {
            throw new Error('User not found');
        }

        // Check if email is already verified
        if (user.is_verified) {
            throw new Error('‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
        }

        // Update user email verification status
        await db('users')
            .where({ id: userId })
            .update({ 
                is_verified: true,
                updated_at: new Date()
            });

        console.log('‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user ID:', userId);

        return {
            success: true,
            message: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            userId: userId,
            email: email
        };
        
    } catch (error: any) {
        console.error('‚ùå Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á:', error.message);
        
        if (error.name === 'TokenExpiredError') {
            throw new Error('‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß');
        } else if (error.name === 'JsonWebTokenError') {
            throw new Error('‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
        }
        
        throw new Error(error.message || 'Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }
};

// Send welcome email after verification
export const sendWelcomeEmail = async (email: string, username: string) => {
    try {
        // Create nodemailer transporter
        const transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
                user: sender,
                pass: app_password,
            },
        });

        const mailOptions = {
            from: `"GoodMeal" <${sender}>`,
            to: email,
            subject: 'GoodMeal - ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß GoodMeal!',
            html: generateWelcomeEmailTemplate(username)
        };

        const info = await transporter.sendMail(mailOptions);

        console.log('‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        console.log('üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á:', email);
        
        return {
            success: true,
            message: '‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
            messageId: info.messageId
        };
        
    } catch (error: any) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö:', error.message);
        // Don't throw error here as it's not critical
        return {
            success: false,
            message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ'
        };
    }
};
