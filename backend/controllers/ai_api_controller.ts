import axios from 'axios';
import OpenAI from 'openai';
import db from '../db_config';
import { calculateRecommendedNutrition, getCalculationSummary, UserProfileData } from '../utils/nutritionCalculator';
import {yearOfBirthToAge } from '../utils/ageCal';

const url = process.env.AI_API || 'http://localhost:11434';
const suggestPlanModel = "gpt-5";
const suggestFoodModel = "gpt-5-mini";

const openai = new OpenAI({
  apiKey: process.env.AI_API_KEY
});

const getUserInfo = async (userId: number) => {
  try {
    const user = await db('users').where({ id: userId }).first();
    if (!user) {
      throw new Error('User not found');
    }
    return {
      age: user.age ? yearOfBirthToAge(user.age) : null,
      weight: user.weight,
      height: user.height,
      gender: user.gender,
      body_fat: user.body_fat,
      target_goal: user.target_goal,
      target_weight: user.target_weight,
      activity_level: user.activity_level,
      additional_requirements: user.additional_requirements,
      dietary_restrictions: user.dietary_restrictions ? user.dietary_restrictions.split(',').map((r: string) => r.trim()) : [],
      eating_type: user.eating_type

    };
  } catch (error) {
    console.error('Error fetching user info:', error);
    throw error;
  }
};

const getUserMealTime = async (userId: number) => {
  try {
    const mealtime = await db('user_meal_time').where({ user_id: userId });
    if (!mealtime) {
      throw new Error('User not found');
    }
    return mealtime;
  } catch (error) {
    console.error('Error fetching user meal time:', error);
    throw error;
  }
};

// Helper: map Thai meal names to our keys and format HH:mm
const toHHMM = (t: any) => {
  const s = String(t ?? '');
  const parts = s.split(':');
  if (parts.length >= 2) {
    const hh = parts[0].padStart(2, '0');
    const mm = parts[1].padStart(2, '0');
    return `${hh}:${mm}`;
  }
  return '00:00';
};

const getDefaultMealTimes = async (userId: number) => {
  try {
    const rows = await db('user_meal_time')
      .select('*')
      .where({ user_id: userId })
      .orderBy('sort_order', 'asc');

    let breakfast = '07:00';
    let lunch = '12:00';
    let dinner = '18:00';

    const active = (rows || []).filter((r: any) => (typeof r.is_active === 'boolean' ? r.is_active : !!Number(r.is_active)));

    // Build meal defs (default + custom)
    const mealDefs: Array<{ key: string; name: string; time: string; isDefault: boolean; sort: number }> = [];
    for (const r of active) {
      const name = String(r.meal_name || '').trim();
      const hhmm = toHHMM(r.meal_time);
      if (name === '‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡πâ‡∏≤') {
        breakfast = hhmm;
        mealDefs.push({ key: 'breakfast', name, time: hhmm, isDefault: true, sort: r.sort_order || 0 });
      } else if (name === '‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô') {
        lunch = hhmm;
        mealDefs.push({ key: 'lunch', name, time: hhmm, isDefault: true, sort: r.sort_order || 0 });
      } else if (name === '‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô') {
        dinner = hhmm;
        mealDefs.push({ key: 'dinner', name, time: hhmm, isDefault: true, sort: r.sort_order || 0 });
      } else {
        // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏ó‡∏ô key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö custom meals
        const key = name.replace(/\s+/g, '_').toLowerCase(); // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô key ‡πÅ‡∏ï‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
        mealDefs.push({ key, name, time: hhmm, isDefault: false, sort: r.sort_order || 0 });
      }
    }

    const mealsText = active
      .map((r: any) => `- ${String(r.meal_name || '').trim()}: ${toHHMM(r.meal_time)}`)
      .join('\n');

    mealDefs.sort((a, b) => a.sort - b.sort);

    return { breakfast, lunch, dinner, mealsText, mealDefs };
  } catch (_) {
    return { breakfast: '07:00', lunch: '12:00', dinner: '18:00', mealsText: '', mealDefs: [
      { key: 'breakfast', name: '‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡πâ‡∏≤', time: '07:00', isDefault: true, sort: 1 },
      { key: 'lunch', name: '‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô', time: '12:00', isDefault: true, sort: 2 },
      { key: 'dinner', name: '‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô', time: '18:00', isDefault: true, sort: 3 },
    ] };
  }
};

export async function suggestFood(userId: number, payload?: any) {
  try {
    const {
      mealType,
      hungerLevel,
      ingredients,
      foodType,
      budget,
      complexityLevel
    } = payload || {};

    const { dietary_restrictions } = await getUserInfo(userId);

    const foodSuggestionPrompt = `‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ AI ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON object ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            ‡∏´‡πâ‡∏≤‡∏°‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON array
            JSON object ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏µ‡∏¢‡πå‡∏î‡∏±‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ: "name", "cal", "carbs", "protein", "fat", "ingredients", "serving"

            ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:
            {
              "name": "‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á",
              "cal": 200,
              "carbs": 10,
              "protein": 30,
              "fat": 5,
              "img": "/assets/images/menuplaceholder.png",
              "ingredients": ["‡∏Å‡∏∏‡πâ‡∏á", "‡∏ï‡∏∞‡πÑ‡∏Ñ‡∏£‡πâ", "‡πÉ‡∏ö‡∏°‡∏∞‡∏Å‡∏£‡∏π‡∏î", "‡∏û‡∏£‡∏¥‡∏Å‡∏Ç‡∏µ‡πâ‡∏´‡∏ô‡∏π", "‡∏ô‡πâ‡∏≥‡∏°‡∏∞‡∏ô‡∏≤‡∏ß"],
              "serving": "1 ‡∏ñ‡πâ‡∏ß‡∏¢ (250 ‡∏Å‡∏£‡∏±‡∏°)"
            }

            img fixed to /assets/images/menuplaceholder.png

            ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏µ‡∏¢‡∏á 1 ‡πÄ‡∏°‡∏ô‡∏π ‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
            - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£: ${mealType}
            - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏¥‡∏ß: ${hungerLevel}
            - ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ: ${ingredients}
            - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£: ${foodType}
            - ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: ${budget}
            - ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£: ${dietary_restrictions || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}
            - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô: ${complexityLevel}
            `;

      const response = await openai.chat.completions.create({
      model: suggestFoodModel,
      messages: [
        {
          role: 'user',
          content: foodSuggestionPrompt
        }
      ]
    });

    const content = response.choices[0].message.content;

    // ‡∏•‡πâ‡∏≤‡∏á backticks ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏õ‡∏•‡∏Å‡πÜ ‡∏ó‡∏µ‡πà AI ‡∏≠‡∏≤‡∏à‡πÉ‡∏™‡πà‡∏°‡∏≤
    const cleaned = content?.replace(/```(?:json)?/g, '').replace(/```/g, '').trim();

    try {
      return JSON.parse(cleaned || '');
    } catch (e) {
      console.error('Failed to parse JSON from AI response:', cleaned);
      throw new Error('Invalid JSON returned from AI');
    }

  } catch (err) {
    if (axios.isAxiosError(err) && err.response) {
      console.error('Error calling AI API:', err.response.data);
    } else if (err instanceof Error) {
      console.error('Error calling AI API:', err.message);
    } else {
      console.error('An unknown error occurred:', err);
    }
    throw err;
  }
}


export async function getFoodPlanSuggestions(userId: number, payload?: any) {}

export async function getFoodPlanSuggestionsByPrompt(userId: number, payload?: any) {
  let recommendedNutrition: any;
  let totalPlanDay: number = 7; 
  
  try {
    const userInfo = await getUserInfo(userId);
    const {
      planDuration,
      selectedCategories,
      selectedBudget,
      varietyLevel,
      selectedIngredients,
      additionalRequirements,
      selectedRestrictions,
      selectedGoals
    } = payload || {};

    totalPlanDay = parseInt(planDuration) || 7;

    const {
      age,
      weight,
      height,
      gender,
      body_fat,
      target_goal,
      target_weight,
      activity_level,
      dietary_restrictions: userDietaryRestrictions,
      eating_type
    } = userInfo;

    // Convert string values to numbers
    const weightNum = typeof weight === 'string' ? parseFloat(weight) : weight;
    const heightNum = typeof height === 'string' ? parseFloat(height) : height;
    const targetWeightNum = typeof target_weight === 'string' ? parseFloat(target_weight) : target_weight;
    const ageNum = typeof age === 'string' ? parseInt(age) : age;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á user profile ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    const userProfile: UserProfileData = {
      age: ageNum,
      weight: weightNum,
      height: heightNum,
      gender,
      body_fat,
      target_goal,
      target_weight: targetWeightNum, // ‡πÉ‡∏ä‡πâ target_weight ‡∏à‡∏≤‡∏Å database ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      activity_level
    };

    
    console.log('üîç [DEBUG] User Profile Data:', {
      age: ageNum,
      weight: weightNum,
      height: heightNum,
      gender,
      body_fat,
      target_goal,
      target_weight: targetWeightNum,
      activity_level,
      original_target_weight: target_weight,
      final_target_weight: userProfile.target_weight
    });

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    recommendedNutrition = calculateRecommendedNutrition(userProfile);
  
    console.log('üîç [DEBUG] Recommended Nutrition Result:', recommendedNutrition);
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å prompt
    const budgetText = selectedBudget === 'low' ? '‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î 50-150 ‡∏ö‡∏≤‡∏ó/‡∏°‡∏∑‡πâ‡∏≠' :
                      selectedBudget === 'medium' ? '‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á 150-300 ‡∏ö‡∏≤‡∏ó/‡∏°‡∏∑‡πâ‡∏≠' :
                      selectedBudget === 'high' ? '‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏´‡∏£‡∏π‡∏´‡∏£‡∏≤ 300+ ‡∏ö‡∏≤‡∏ó/‡∏°‡∏∑‡πâ‡∏≠' :
                      selectedBudget === 'flexible' ? '‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå' : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';

    const varietyText = varietyLevel === 'low' ? '‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ô‡πâ‡∏≠‡∏¢ - ‡πÄ‡∏ô‡πâ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏î‡∏¥‡∏°‡πÜ ‡πÑ‡∏°‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏°‡∏≤‡∏Å' :
                       varietyLevel === 'medium' ? '‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á - ‡∏ú‡∏™‡∏°‡∏ú‡∏™‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÜ' :
                       varietyLevel === 'high' ? '‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏°‡∏≤‡∏Å - ‡∏•‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏°‡∏∑‡πâ‡∏≠' : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';

    const ingredientsText = selectedIngredients && selectedIngredients.length > 0 ? 
                           selectedIngredients.join(', ') : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞';

    const categoriesText = selectedCategories && selectedCategories.length > 0 ? 
                          selectedCategories.join(', ') : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£';

    const restrictionsText = selectedRestrictions && selectedRestrictions.length > 0 ? 
                            selectedRestrictions.join(', ') : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î';

    const goalsText = selectedGoals && selectedGoals.length > 0 ? 
                     selectedGoals.join(', ') : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞';

    const { breakfast: bfTime2, lunch: lnTime2, dinner: dnTime2, mealsText: mealsText2, mealDefs: mealDefs2 } = await getDefaultMealTimes(userId);

    // Build distribution and example for dynamic meals (including custom)
    const baseShare2: Record<string, number> = { breakfast: 0.3, lunch: 0.4, dinner: 0.3 };
    const shares2: Record<string, number> = {};
    const customCount2 = mealDefs2.filter(m => !m.isDefault).length;
    const customShare2 = customCount2 > 0 ? Math.min(0.1, 0.2 / customCount2) : 0;
    let totalShare2 = 0;
    for (const m of mealDefs2) {
      if (m.isDefault) shares2[m.key] = baseShare2[m.key] ?? 0.3; else shares2[m.key] = customShare2 || 0.1;
      totalShare2 += shares2[m.key];
    }
    if (totalShare2 > 0) for (const k of Object.keys(shares2)) shares2[k] = shares2[k] / totalShare2;
    const perMealKcal2: Record<string, number> = {};
    for (const m of mealDefs2) perMealKcal2[m.key] = Math.round(recommendedNutrition.cal * (shares2[m.key] || 0.3));
    const mealsDistributionBlock2 = mealDefs2.map(m => `- ${m.name}: ${perMealKcal2[m.key]} kcal at ${m.time}`).join('\\n');
    const mealsExampleBlock2 = mealDefs2.map(m => `      \"${m.key}\": {\\n        \"name\": \"${m.name}\",\\n        \"time\": \"${m.time}\",\\n        \"totalCal\": ${perMealKcal2[m.key]},\\n        \"items\": [{\\n          \"name\": \"‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£${m.name}\",\\n          \"cal\": ${perMealKcal2[m.key]},\\n          \"carb\": 45,\\n          \"fat\": 12,\\n          \"protein\": 25,\\n          \"img\": \"assets/images/menuplaceholder.png\",\\n          \"serving\": \",\\n          \"source\": \"ai\",\\n          \"isUserFood\": false\\n        }]\\n      }`).join(',\\n');

    const foodPlanPrompt = `‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢ ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${totalPlanDay} ‡∏ß‡∏±‡∏ô ‡πÇ‡∏î‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
                            ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£ (‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô):
                            - ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô: ${recommendedNutrition.cal} ‡∏Å‡∏¥‡πÇ‡∏•‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ
                            - ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô: ${recommendedNutrition.protein} ‡∏Å‡∏£‡∏±‡∏°
                            - ‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï: ${recommendedNutrition.carb} ‡∏Å‡∏£‡∏±‡∏°
                            - ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô: ${recommendedNutrition.fat} ‡∏Å‡∏£‡∏±‡∏°
                            *** ‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ***
                            *** ‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤ ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô ‡∏Ñ‡∏≤‡∏£‡πå‡∏ö ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô ‡∏ï‡∏≤‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ¬±5 ‡∏Å‡∏£‡∏±‡∏° ***

                            ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:
                            - ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: ${planDuration} ‡∏ß‡∏±‡∏ô
                            - ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: ${budgetText}
                            - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢: ${varietyText}
                            - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö: ${categoriesText}
                            - ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö: ${ingredientsText}
                            - ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô: ${restrictionsText}
                            - ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û: ${goalsText}
                            - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: ${additionalRequirements || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}
                            - ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏ô: ${eating_type || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}

                            ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: ${userDietaryRestrictions?.join(', ') || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}

                            ‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ):
                            ${mealsText2 || `- ‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡πâ‡∏≤: ${bfTime2}\n- ‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô: ${lnTime2}\n- ‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô: ${dnTime2}`}

                            ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô:
                            ${mealDefs2.map(m => `- ${m.name}: ${perMealKcal2[m.key]} kcal ‡πÄ‡∏ß‡∏•‡∏≤ ${m.time}`).join('\n')}

                            ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON (‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô):
                            {
                              "1": {
                                "totalCal": ${recommendedNutrition.cal},
                                "meals": {
                            ${mealsExampleBlock2}
                                }
                              }
                            }

                            ‡∏Å‡∏é:
                            1. ‡∏™‡∏£‡πâ‡∏≤‡∏á ${totalPlanDay} ‡∏ß‡∏±‡∏ô (key "1" ‡∏ñ‡∏∂‡∏á "${totalPlanDay}")
                            2. ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏∑‡πâ‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πà 1 ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                            3. ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∏‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
                            4. ‡∏Ñ‡∏≥‡∏ô‡∏∂‡∏á‡∏ñ‡∏∂‡∏á‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                            5. ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ markdown ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏î ‡πÜ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                            6. ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á 100%
                            7. ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                            8. serving ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÄ‡∏™‡∏°‡∏≠ ‡πÄ‡∏ä‡πà‡∏ô "1 ‡∏ñ‡πâ‡∏ß‡∏¢ (200 ‡∏Å‡∏£‡∏±‡∏°)" ‡∏´‡∏£‡∏∑‡∏≠ "150 ‡∏Å‡∏£‡∏±‡∏°"

                            ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á JSON ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:
                            `;    

    console.log('üéØ Food Plan Prompt Generated:');
    console.log('='.repeat(80));
    console.log(foodPlanPrompt);
    console.log('='.repeat(80));
    console.log(`üìä Nutritional Targets: ${recommendedNutrition.cal} kcal, P:${recommendedNutrition.protein}g, C:${recommendedNutrition.carb}g, F:${recommendedNutrition.fat}g`);
    console.log(`üéØ User Preferences Summary:`);
    console.log(`- Duration: ${planDuration} days`);
    console.log(`- Budget: ${budgetText}`);
    console.log(`- Variety: ${varietyText}`);
    console.log(`- Categories: ${categoriesText}`);
    console.log(`- Ingredients: ${ingredientsText}`);
    console.log(`- Restrictions: ${restrictionsText}`);
    console.log(`- Goals: ${goalsText}`);

    // ‡∏™‡πà‡∏á prompt ‡πÑ‡∏õ OpenAI
    console.log('üöÄ Sending prompt to OpenAI...');
  
    const response = await openai.chat.completions.create({
      model: suggestPlanModel,
      messages: [
        {
          role: 'system',
          content: 'You are a professional Thai nutritionist who creates precise food plans based on user preferences. Always return valid JSON without any explanations or formatting.'
        },
        {
          role: 'user',
          content: foodPlanPrompt
        }
      ]
    });

    const content = response.choices[0].message.content;
    const cleaned = content?.replace(/```(?:json)?/g, '').replace(/```/g, '').trim();
    
    console.log('ü§ñ Raw AI Response Length:', content?.length);
    console.log('üßπ Cleaned Response Length:', cleaned?.length);
    
    if (cleaned && cleaned.length < 100) {
      console.warn('‚ö†Ô∏è AI response seems too short:', cleaned);
    }
    
    try {
      const parsedResult = JSON.parse(cleaned || '');
      
      // Validate the structure
      if (!parsedResult || typeof parsedResult !== 'object') {
        throw new Error('Response is not a valid object');
      }
      
      // Check if we have at least one day
      const dayKeys = Object.keys(parsedResult);
      if (dayKeys.length === 0) {
        throw new Error('No days found in the food plan');
      }
      
      // Validate first day structure
      const firstDay = parsedResult[dayKeys[0]];
      if (!firstDay.meals || !firstDay.totalCal) {
        throw new Error('Invalid day structure - missing meals or totalCal');
      }
      
      console.log('‚úÖ AI Response parsed successfully with', dayKeys.length, 'days');
      console.log('üçΩÔ∏è Sample meal from day 1:', firstDay.meals.breakfast?.name || 'N/A');
      
      return parsedResult;
    } catch (e) {
      console.error('‚ùå Failed to parse JSON from AI response:');
      console.error('Raw content length:', content?.length);
      console.error('Cleaned content length:', cleaned?.length);
      console.error('Last 200 chars of cleaned content:', cleaned?.slice(-200));
      console.error('Parse error:', e);
      
      throw new Error(`Invalid JSON returned from AI. Length: ${cleaned?.length}, Error: ${e}`);
    }

  } catch (err) {
    console.error('Error in getFoodPlanSuggestionsByPrompt:', err);
    
    // If AI fails, try to provide a fallback plan
    if (err instanceof Error && err.message.includes('Invalid JSON')) {
      console.warn('üîÑ AI failed, creating fallback plan...');
      try {
        const fallbackPlan = createFallbackPlan(recommendedNutrition, totalPlanDay || 7);
        console.log('‚úÖ Fallback plan created successfully');
        return fallbackPlan;
      } catch (fallbackErr) {
        console.error('‚ùå Fallback plan creation failed:', fallbackErr);
      }
    }
    
    if (axios.isAxiosError(err) && err.response) {
      console.error('Error calling OpenAI API:', err.response.data);
    } else if (err instanceof Error) {
      console.error('Error calling OpenAI API:', err.message);
    } else {
      console.error('An unknown error occurred:', err);
    }
    throw err;
  }
}


function createFallbackPlan(recommendedNutrition: any, totalPlanDay: number, times?: { breakfast: string; lunch: string; dinner: string }) {
  const fallbackPlan: any = {};
  const bfTime = times?.breakfast || '07:00';
  const lnTime = times?.lunch || '12:00';
  const dnTime = times?.dinner || '18:00';
  
  for (let day = 1; day <= totalPlanDay; day++) {
    const breakfastCal = Math.round(recommendedNutrition.cal * 0.3);
    const lunchCal = Math.round(recommendedNutrition.cal * 0.4);
    const dinnerCal = Math.round(recommendedNutrition.cal * 0.3);
    
    fallbackPlan[day.toString()] = {
      totalCal: recommendedNutrition.cal,
      meals: {
        breakfast: {
          name: "‡∏Ç‡πâ‡∏≤‡∏ß‡∏ï‡πâ‡∏°‡πÑ‡∏Ç‡πà‡πÑ‡∏Å‡πà",
          time: bfTime,
          totalCal: breakfastCal,
          items: [{
            name: "‡∏Ç‡πâ‡∏≤‡∏ß‡∏ï‡πâ‡∏°‡πÑ‡∏Ç‡πà‡πÑ‡∏Å‡πà",
            cal: breakfastCal,
            carb: Math.round(recommendedNutrition.carb * 0.3),
            fat: Math.round(recommendedNutrition.fat * 0.3),
            protein: Math.round(recommendedNutrition.protein * 0.3),
            img: "",
            ingredient: "",
            source: "ai",
            isUserFood: false
          }]
        },
        lunch: {
          name: "‡∏ú‡∏±‡∏î‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö",
          time: lnTime,
          totalCal: lunchCal,
          items: [{
            name: "‡∏ú‡∏±‡∏î‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡∏´‡∏°‡∏π‡∏™‡∏±‡∏ö",
            cal: lunchCal,
            carb: Math.round(recommendedNutrition.carb * 0.4),
            fat: Math.round(recommendedNutrition.fat * 0.4),
            protein: Math.round(recommendedNutrition.protein * 0.4),
            img: "",
            ingredient: "",
            source: "ai",
            isUserFood: false
          }]
        },
        dinner: {
          name: "‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á",
          time: dnTime,
          totalCal: dinnerCal,
          items: [{
            name: "‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á",
            cal: dinnerCal,
            carb: Math.round(recommendedNutrition.carb * 0.3),
            fat: Math.round(recommendedNutrition.fat * 0.3),
            protein: Math.round(recommendedNutrition.protein * 0.3),
            img: "",
            ingredient: "",
            source: "ai",
            isUserFood: false
          }]
        }
      }
    };
  }
  
  return fallbackPlan;
}
