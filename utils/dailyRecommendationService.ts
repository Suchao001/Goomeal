
export interface DailyNutritionData {
  calories: number;
  protein: number;
  carbs: number;
  fat: number;
}

export interface RecommendedNutrition {
  calories: number;
  protein: number;
  carbs: number;
  fat: number;
}

export interface NutrientAssessment {
  status: 'excellent' | 'good' | 'need_more' | 'insufficient' | 'excessive' | 'needs_adjustment';
  score: number;
  percentage: number;
}

export interface DailyAssessment {
  calories: NutrientAssessment;
  protein: NutrientAssessment;
  carbs: NutrientAssessment;
  fat: NutrientAssessment;
}

export interface DailyRecommendation {
  date: string;
  totalScore: number;
  grade: string;
  assessments: DailyAssessment;
  nutritionAdvice: string[];
  activityAdvice: string[];
  hydrationAdvice: string[];
  timingAdvice: string[];
  tomorrowTips: string[];
  summary: string;
}

export interface UserProfile {
  target_goal: 'decrease' | 'increase' | 'healthy';
  weight: number;
  age: number;
  activity_level: string;
}

export function assessNutrient(actual: number, target: number, type: 'calories' | 'protein' | 'carbs' | 'fat'): NutrientAssessment {
  if (target === 0) {
    return { status: 'needs_adjustment', score: 0, percentage: 0 };
  }

  const percentage = (actual / target) * 100;
  
  switch(type) {
    case 'protein':
      if (percentage >= 90 && percentage <= 110) return { status: 'excellent', score: 25, percentage };
      if (percentage >= 70 && percentage < 90) return { status: 'need_more', score: 18, percentage };
      if (percentage < 70) return { status: 'insufficient', score: 10, percentage };
      return { status: 'excessive', score: 15, percentage };
      
    case 'calories':
      if (percentage >= 95 && percentage <= 105) return { status: 'excellent', score: 25, percentage };
      if (percentage >= 85 && percentage <= 115) return { status: 'good', score: 20, percentage };
      return { status: 'needs_adjustment', score: 12, percentage };
      
    case 'carbs':
      if (percentage >= 80 && percentage <= 120) return { status: 'excellent', score: 25, percentage };
      if (percentage >= 70 && percentage < 80) return { status: 'need_more', score: 18, percentage };
      if (percentage < 70) return { status: 'insufficient', score: 10, percentage };
      return { status: 'excessive', score: 15, percentage };
      
    case 'fat':
      if (percentage >= 80 && percentage <= 120) return { status: 'excellent', score: 25, percentage };
      if (percentage >= 60 && percentage < 80) return { status: 'need_more', score: 18, percentage };
      if (percentage < 60) return { status: 'insufficient', score: 10, percentage };
      return { status: 'excessive', score: 15, percentage };
      
    default:
      return { status: 'needs_adjustment', score: 0, percentage };
  }
}

/**
 * ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
 */
export function assessDailyPerformance(actualIntake: DailyNutritionData, recommended: RecommendedNutrition): DailyAssessment {
  return {
    calories: assessNutrient(actualIntake.calories, recommended.calories, 'calories'),
    protein: assessNutrient(actualIntake.protein, recommended.protein, 'protein'),
    carbs: assessNutrient(actualIntake.carbs, recommended.carbs, 'carbs'),
    fat: assessNutrient(actualIntake.fat, recommended.fat, 'fat')
  };
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πâ‡∏≤‡∏ô‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£
 */
export function generateNutritionAdvice(assessments: DailyAssessment): string[] {
  const advice: string[] = [];
  
  // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πâ‡∏≤‡∏ô‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà
  const caloriePercent = assessments.calories.percentage;
  if (assessments.calories.status === 'excellent') {
    advice.push(`‚úÖ ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà: ${caloriePercent.toFixed(0)}% - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢)`);
  } else if (assessments.calories.status === 'good') {
    advice.push(`‚úÖ ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà: ${caloriePercent.toFixed(0)}% - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°`);
  } else {
    advice.push(`‚ö†Ô∏è ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà: ${caloriePercent.toFixed(0)}% - ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á`);
  }
  
  // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πâ‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô
  const proteinPercent = assessments.protein.percentage;
  switch (assessments.protein.status) {
    case 'excellent':
      advice.push(`‚úÖ ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô: ${proteinPercent.toFixed(0)}% - ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢`);
      break;
    case 'need_more':
      advice.push(`‚ö†Ô∏è ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô: ${proteinPercent.toFixed(0)}% - ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏Ç‡πà, ‡πÑ‡∏Å‡πà, ‡∏õ‡∏•‡∏≤, ‡∏ñ‡∏±‡πà‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡∏°‡∏ñ‡∏±‡πà‡∏ß‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á`);
      break;
    case 'insufficient':
      advice.push(`üî¥ ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô: ${proteinPercent.toFixed(0)}% - ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÉ‡∏ô‡∏°‡∏∑‡πâ‡∏≠‡∏ñ‡∏±‡∏î‡πÑ‡∏õ`);
      break;
    case 'excessive':
      advice.push(`‚ö†Ô∏è ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô: ${proteinPercent.toFixed(0)}% - ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡πÅ‡∏ó‡∏ô`);
      break;
  }
  
  // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πâ‡∏≤‡∏ô‡∏Ñ‡∏≤‡∏£‡πå‡∏ö
  const carbPercent = assessments.carbs.percentage;
  switch (assessments.carbs.status) {
    case 'excellent':
      advice.push(`‚úÖ ‡∏Ñ‡∏≤‡∏£‡πå‡∏ö: ${carbPercent.toFixed(0)}% - ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°`);
      break;
    case 'need_more':
    case 'insufficient':
      advice.push(`‚ö†Ô∏è ‡∏Ñ‡∏≤‡∏£‡πå‡∏ö: ${carbPercent.toFixed(0)}% - ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß ‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏•‡πÑ‡∏°‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°`);
      break;
    case 'excessive':
      advice.push(`‚ö†Ô∏è ‡∏Ñ‡∏≤‡∏£‡πå‡∏ö: ${carbPercent.toFixed(0)}% - ‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡∏°‡∏≤‡∏Å‡πÑ‡∏õ ‡∏•‡∏≠‡∏á‡∏•‡∏î‡∏Ç‡πâ‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏±‡∏Å‡πÅ‡∏ó‡∏ô`);
      break;
  }
  
  // ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πâ‡∏≤‡∏ô‡πÑ‡∏Ç‡∏°‡∏±‡∏ô
  const fatPercent = assessments.fat.percentage;
  switch (assessments.fat.status) {
    case 'excellent':
      advice.push(`‚úÖ ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô: ${fatPercent.toFixed(0)}% - ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏î‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°`);
      break;
    case 'need_more':
    case 'insufficient':
      advice.push(`‚ö†Ô∏è ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô: ${fatPercent.toFixed(0)}% - ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏î‡∏µ ‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏∞‡πÇ‡∏ß‡∏Ñ‡∏≤‡πÇ‡∏î, ‡∏ñ‡∏±‡πà‡∏ß, ‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡∏°‡∏∞‡∏Å‡∏≠‡∏Å`);
      break;
    case 'excessive':
      advice.push(`‚ö†Ô∏è ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô: ${fatPercent.toFixed(0)}% - ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô ‡∏•‡∏≠‡∏á‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≠‡∏î ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏∂‡πà‡∏á ‡∏ï‡πâ‡∏°`);
      break;
  }
  
  return advice;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
 */
export function generateActivityAdvice(caloriePercent: number, userGoal: string): string[] {
  const advice: string[] = [];
  
  if (userGoal === 'decrease') {
    if (caloriePercent > 110) {
      advice.push("üèÉ‚Äç‚ôÇÔ∏è ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏î‡∏¥‡∏ô 30 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏∂‡πâ‡∏ô‡∏•‡∏á‡∏ö‡∏±‡∏ô‡πÑ‡∏î");
    } else if (caloriePercent < 80) {
      advice.push("‚ö†Ô∏è ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏ö‡∏≤‡πÜ");
    } else {
      advice.push("‚úÖ ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏ö‡∏≤‡πÜ 20-30 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô");
    }
  } else if (userGoal === 'increase') {
    if (caloriePercent < 90) {
      advice.push("üí™ ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏ï‡πâ‡∏≤‡∏ô‡∏ó‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏¢‡∏Å‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å");
    } else if (caloriePercent > 120) {
      advice.push("üö∂‚Äç‚ôÇÔ∏è ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏ö‡∏≤‡πÜ");
    } else {
      advice.push("üí™ ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏ï‡πâ‡∏≤‡∏ô‡∏ó‡∏≤‡∏ô‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠");
    }
  } else {
    advice.push("üèÉ‚Äç‚ôÇÔ∏è ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ 30 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ");
  }
  
  return advice;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πâ‡∏≤‡∏ô‡∏ô‡πâ‡∏≥
 */
export function generateHydrationAdvice(weight: number): string[] {
  const minWaterMl = Math.round(weight * 35);
  const recommendedGlasses = Math.ceil(minWaterMl / 250); // 1 ‡πÅ‡∏Å‡πâ‡∏ß = 250ml
  
  return [
    `üíß ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ ${recommendedGlasses} ‡πÅ‡∏Å‡πâ‡∏ß/‡∏ß‡∏±‡∏ô (${minWaterMl}ml)`,
    `üö∞ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏µ‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞: ‡πÉ‡∏™‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡πà‡∏≠‡∏ô = ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠`,
    `‚è∞ ‡∏ï‡∏±‡πâ‡∏á‡∏õ‡∏•‡∏∏‡∏Å‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏ó‡∏∏‡∏Å 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`
  ];
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
 */
export function generateTimingAdvice(): string[] {
  const currentHour = new Date().getHours();
  const advice: string[] = [];
  
  if (currentHour >= 6 && currentHour <= 10) {
    advice.push("üåÖ ‡πÄ‡∏ä‡πâ‡∏≤‡∏ô‡∏µ‡πâ: ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ä‡πâ‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏∑‡πà‡∏ô");
    advice.push("‚òï ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤ 1-2 ‡πÅ‡∏Å‡πâ‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ä‡πâ‡∏≤");
  } else if (currentHour >= 11 && currentHour <= 14) {
    advice.push("üåû ‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô: ‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î");
    advice.push("üçö ‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡πÅ‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
  } else if (currentHour >= 17 && currentHour <= 20) {
    advice.push("üåÜ ‡πÄ‡∏¢‡πá‡∏ô‡∏ô‡∏µ‡πâ: ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏¢‡πá‡∏ô‡∏Å‡πà‡∏≠‡∏ô 19:30");
    advice.push("ü•ó ‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ö‡∏≤‡πÅ‡∏•‡∏∞‡∏¢‡πà‡∏≠‡∏¢‡∏á‡πà‡∏≤‡∏¢");
  } else {
    advice.push("üåô ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á 21:00 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö‡∏î‡∏µ");
  }
  
  return advice;
}

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
 */
export function calculateDailyScore(assessments: DailyAssessment): { totalScore: number; grade: string } {
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å 4 ‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏ï‡πá‡∏° 25)
  const nutritionScore = assessments.calories.score + assessments.protein.score + assessments.carbs.score + assessments.fat.score;
  const totalScore = Math.round(nutritionScore);
  
  let grade: string;
  if (totalScore >= 90) grade = "‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å";
  else if (totalScore >= 80) grade = "‡∏î‡∏µ‡∏°‡∏≤‡∏Å";
  else if (totalScore >= 70) grade = "‡∏î‡∏µ";
  else if (totalScore >= 60) grade = "‡∏û‡∏≠‡πÉ‡∏ä‡πâ";
  else grade = "‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á";
  
  return { totalScore, grade };
}


export function generateTomorrowTips(assessments: DailyAssessment, userProfile: UserProfile): string[] {
  const tips: string[] = [];
  
  // ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î
  if (assessments.protein.status === 'need_more' || assessments.protein.status === 'insufficient') {
    tips.push("ü•ö ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô: ‡πÉ‡∏™‡πà‡πÑ‡∏Ç‡πà‡∏ï‡πâ‡∏°‡πÉ‡∏ô‡∏™‡∏•‡∏±‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≤‡∏ô‡∏õ‡∏•‡∏≤‡πÄ‡∏ú‡∏≤");
  }
  
  if (assessments.carbs.status === 'need_more' || assessments.carbs.status === 'insufficient') {
    tips.push("üçå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô: ‡∏ó‡∏≤‡∏ô‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡πâ‡∏≤");
  }
  
  if (assessments.fat.status === 'need_more' || assessments.fat.status === 'insufficient') {
    tips.push("ü•ë ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏î‡∏µ: ‡πÉ‡∏™‡πà‡∏≠‡∏∞‡πÇ‡∏ß‡∏Ñ‡∏≤‡πÇ‡∏î‡πÉ‡∏ô‡∏™‡∏•‡∏±‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏±‡πà‡∏ß‡πÉ‡∏ô‡∏Ç‡∏ô‡∏°");
  }
  
  // ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
  if (userProfile.target_goal === 'decrease') {
    tips.push("üö∂‚Äç‚ôÄÔ∏è ‡πÄ‡∏î‡∏¥‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏•‡∏á‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πÉ‡∏ô‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏® ‡πÅ‡∏ó‡∏ô‡∏•‡∏¥‡∏ü‡∏ï‡πå");
  } else if (userProfile.target_goal === 'increase') {
    tips.push("üí™ ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ï‡πâ‡∏≤‡∏ô‡∏ó‡∏≤‡∏ô 2-3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå");
  }
  
  // ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
  tips.push("üíß ‡∏ï‡∏±‡πâ‡∏á‡∏õ‡∏•‡∏∏‡∏Å‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏ó‡∏∏‡∏Å 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á");
  tips.push("‚è∞ ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤");
  
  return tips.slice(0, 4); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà 4 ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
 */
export function generateDailyRecommendation(
  actualIntake: DailyNutritionData, 
  recommended: RecommendedNutrition, 
  userProfile: UserProfile
): DailyRecommendation {
  const assessments = assessDailyPerformance(actualIntake, recommended);
  const { totalScore, grade } = calculateDailyScore(assessments);
  const nutritionAdvice = generateNutritionAdvice(assessments);
  const activityAdvice = generateActivityAdvice(assessments.calories.percentage, userProfile.target_goal);
  const hydrationAdvice = generateHydrationAdvice(userProfile.weight);
  const timingAdvice = generateTimingAdvice();
  const tomorrowTips = generateTomorrowTips(assessments, userProfile);
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ
  const summary = `üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: ${totalScore}/100 (${grade})`;
  
  return {
    date: new Date().toISOString().split('T')[0],
    totalScore,
    grade,
    assessments,
    nutritionAdvice,
    activityAdvice,
    hydrationAdvice,
    timingAdvice,
    tomorrowTips,
    summary
  };
}
